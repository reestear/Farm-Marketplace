openapi: 3.0.3
info:
  title: Farmer Market API
  version: 1.0.0
  description: Farmer Market API
paths:
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/registration/:
    post:
      operationId: auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/registration/resend-email/:
    post:
      operationId: auth_registration_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/registration/verify-email/:
    post:
      operationId: auth_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/farms/:
    get:
      operationId: farms_list
      description: List all farms
      summary: List Farms
      tags:
      - farms
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Farm'
          description: ''
    post:
      operationId: farms_create
      description: Create a farm
      summary: Create Farm
      tags:
      - farms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
  /api/farms/{farm_id}/products/{product_id}/:
    post:
      operationId: farms_products_create
      description: Add a product to a farm
      summary: Add Product to Farm
      parameters:
      - in: path
        name: farm_id
        schema:
          type: integer
        required: true
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - farms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FarmProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FarmProductRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmProduct'
          description: ''
    delete:
      operationId: farms_products_destroy
      description: Delete a product from a farm
      summary: Delete Product from Farm
      parameters:
      - in: path
        name: farm_id
        schema:
          type: integer
        required: true
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - farms
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '204':
          description: No response body
  /api/farms/{id}/:
    get:
      operationId: farms_retrieve
      description: Retrieve a farm
      summary: Retrieve Farm
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Farm.
        required: true
      tags:
      - farms
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    patch:
      operationId: farms_partial_update
      description: Partial update a farm
      summary: Partial Update Farm
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Farm.
        required: true
      tags:
      - farms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFarmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFarmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFarmRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
          description: ''
    delete:
      operationId: farms_destroy
      description: Delete a farm
      summary: Delete Farm
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Farm.
        required: true
      tags:
      - farms
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '204':
          description: No response body
  /api/products/:
    get:
      operationId: products_list
      description: List all products
      summary: List Products
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: products_create
      description: Create a product
      summary: Create Product
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{id}/:
    get:
      operationId: products_retrieve
      description: Retrieve a product
      summary: Retrieve Product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: products_partial_update
      description: Partial update a product
      summary: Partial Update Product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      description: Delete a product
      summary: Delete Product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product.
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '204':
          description: No response body
  /api/reviews/:
    get:
      operationId: reviews_list
      description: List all reviews
      summary: List Reviews
      tags:
      - reviews
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
    post:
      operationId: reviews_create
      description: Create a review
      summary: Create Review
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/reviews/{id}/:
    get:
      operationId: reviews_retrieve
      description: Retrieve a review
      summary: Retrieve Review
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: reviews_partial_update
      description: Partial update a review
      summary: Partial Update Review
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: reviews_destroy
      description: Delete a review
      summary: Delete Review
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      description: List all users
      summary: List Users
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      description: Create a user
      summary: Create User
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{email}/:
    get:
      operationId: users_retrieve
      description: Retrieve a user
      summary: Retrieve User
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email Address
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: Partial update a user
      summary: Partial Update User
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email Address
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: Delete a user
      summary: Delete User
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email Address
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - Bearer: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Farm:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        farmer:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        products:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
        name:
          type: string
          title: Farm Name
          maxLength: 100
        size:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Farm Size (in hectares)
        location:
          type: string
          title: Farm Location
          maxLength: 255
        resources:
          type: string
          title: Available Resources
      required:
      - farmer
      - id
      - location
      - name
      - products
      - size
    FarmProduct:
      type: object
      properties:
        farm_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
      required:
      - farm_id
      - product_id
    FarmProductRequest:
      type: object
      properties:
        farm_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
      required:
      - farm_id
      - product_id
    FarmRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Farm Name
          maxLength: 100
        size:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Farm Size (in hectares)
        location:
          type: string
          minLength: 1
          title: Farm Location
          maxLength: 255
        resources:
          type: string
          title: Available Resources
        farmer_id:
          type: string
          format: uuid
          writeOnly: true
      required:
      - farmer_id
      - location
      - name
      - size
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedFarmRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Farm Name
          maxLength: 100
        size:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Farm Size (in hectares)
        location:
          type: string
          minLength: 1
          title: Farm Location
          maxLength: 255
        resources:
          type: string
          title: Available Resources
        farmer_id:
          type: string
          format: uuid
          writeOnly: true
    PatchedProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Product Name
          maxLength: 100
        description:
          type: string
          title: Product Description
        unit_type:
          $ref: '#/components/schemas/UnitTypeEnum'
        category:
          type: string
          minLength: 1
          maxLength: 100
    PatchedReviewRequest:
      type: object
      properties:
        buyer:
          type: string
          format: uuid
          nullable: true
        farm:
          type: string
          format: uuid
        product:
          type: string
          format: uuid
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        text:
          type: string
          title: Review Text
    PatchedUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
    PatchedUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email Address
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
        phone_number:
          type: string
          minLength: 1
          maxLength: 15
        user_type:
          $ref: '#/components/schemas/UserTypeEnum'
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          title: Product Name
          maxLength: 100
        description:
          type: string
          title: Product Description
        unit_type:
          $ref: '#/components/schemas/UnitTypeEnum'
        category:
          type: string
          maxLength: 100
      required:
      - category
      - id
      - name
      - unit_type
    ProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Product Name
          maxLength: 100
        description:
          type: string
          title: Product Description
        unit_type:
          $ref: '#/components/schemas/UnitTypeEnum'
        category:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - category
      - name
      - unit_type
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 0
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password1
      - password2
    ResendEmailVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        buyer:
          type: string
          format: uuid
          nullable: true
        farm:
          type: string
          format: uuid
        product:
          type: string
          format: uuid
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        text:
          type: string
          title: Review Text
      required:
      - farm
      - id
      - product
      - rating
    ReviewRequest:
      type: object
      properties:
        buyer:
          type: string
          format: uuid
          nullable: true
        farm:
          type: string
          format: uuid
        product:
          type: string
          format: uuid
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        text:
          type: string
          title: Review Text
      required:
      - farm
      - product
      - rating
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    UnitTypeEnum:
      enum:
      - kg
      - g
      - l
      - pcs
      type: string
      description: |-
        * `kg` - Kilograms
        * `g` - Grams
        * `l` - Liters
        * `pcs` - Pieces
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          title: Email Address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone_number:
          type: string
          maxLength: 15
        user_type:
          $ref: '#/components/schemas/UserTypeEnum'
      required:
      - email
      - first_name
      - id
      - last_name
      - phone_number
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          format: uuid
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          readOnly: true
          title: Email Address
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - email
      - first_name
      - last_name
      - pk
    UserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
      required:
      - first_name
      - last_name
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email Address
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
        phone_number:
          type: string
          minLength: 1
          maxLength: 15
        user_type:
          $ref: '#/components/schemas/UserTypeEnum'
      required:
      - email
      - first_name
      - last_name
      - phone_number
    UserTypeEnum:
      enum:
      - Farmer
      - Buyer
      - Administrator
      - Superuser
      type: string
      description: |-
        * `Farmer` - Farmer
        * `Buyer` - Buyer
        * `Administrator` - Administrator
        * `Superuser` - Superuser
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
