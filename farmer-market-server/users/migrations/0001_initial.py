# Generated by Django 5.0 on 2024-11-29 20:25

import django.core.validators
import users.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Date"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Update Date"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=30, verbose_name="First Name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=30, verbose_name="Last Name"),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[
                            django.core.validators.EmailValidator(
                                "Invalid email address"
                            )
                        ],
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(max_length=15, verbose_name="Phone Number"),
                ),
                (
                    "farmer_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Pending", "Pending"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                        ],
                        default="Pending",
                        help_text="Applicable only to Farmers.",
                        max_length=10,
                        null=True,
                        verbose_name="Farmer Status",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("Farmer", "Farmer"),
                            ("Buyer", "Buyer"),
                            ("Administrator", "Administrator"),
                            ("Superuser", "Superuser"),
                        ],
                        default="Buyer",
                        max_length=20,
                        verbose_name="User Type",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="Staff Status"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Active Status"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Administrator",
            fields=[],
            options={
                "verbose_name": "Administrator",
                "verbose_name_plural": "Administrators",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
            managers=[
                ("objects", users.models.AdministratorManager()),
            ],
        ),
        migrations.CreateModel(
            name="Buyer",
            fields=[],
            options={
                "verbose_name": "Buyer",
                "verbose_name_plural": "Buyers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
            managers=[
                ("objects", users.models.BuyerManager()),
            ],
        ),
        migrations.CreateModel(
            name="Farmer",
            fields=[],
            options={
                "verbose_name": "Farmer",
                "verbose_name_plural": "Farmers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
            managers=[
                ("objects", users.models.FarmerManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("farmer_status__isnull", False), ("user_type", "Farmer")),
                    models.Q(
                        ("farmer_status__isnull", True),
                        ("user_type__in", ["Buyer", "Administrator", "Superuser"]),
                    ),
                    _connector="OR",
                ),
                name="status_only_for_farmers",
            ),
        ),
    ]
